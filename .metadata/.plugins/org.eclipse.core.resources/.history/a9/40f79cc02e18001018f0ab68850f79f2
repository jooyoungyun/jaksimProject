package com.target.service;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.target.dto.Meeting;
import com.target.dto.MeetingDTO;
import com.target.dto.MeetingYoil;
import com.target.mapper.MeetingMapper;

@Service
public class MeetingService {
	private static final String UPLOAD_DIR = "uploads";
	
	MeetingMapper meetingMapper;
	
	public MeetingService(MeetingMapper meetingMapper) {
		this.meetingMapper = meetingMapper;
	}
	
	// 이미지 저장 메소드
	private String saveImage(MultipartFile imageFile) {
		if(imageFile.isEmpty()) {
			return null;
		}
		
		// 이미지 저장 경로
		String filename = imageFile.getOriginalFilename();
		String newImageName = UUID.randomUUID().toString() + "_" + filename;
		Path uploadPath = Paths.get(UPLOAD_DIR,newImageName);
		try {
			// uploads 폴더가 있는지 확인하여, 없다면 폴더 생성하기
			if(!Files.exists(Paths.get(UPLOAD_DIR))) {
				Files.createDirectories(Paths.get(UPLOAD_DIR));
			}
			
			// 파일을 저장한다. 해당 경로에 해당 이미지를 바이트로 변환하여 저장
			Files.write(uploadPath, imageFile.getBytes());
			return uploadPath.getFileName().toString();
		} catch(java.io.IOException io) {
			io.printStackTrace();
			return null;
		}
	}
	
	// meeting 생성 메소드
	public Integer createMetting(MeetingDTO dto) {
		// meeting 생성
		// coverimage 저장
		String imageResult = saveImage(dto.getCoverImage());
		if(imageResult.equals("실패")) {
			return -1;
		}
		
		Meeting meeting = new Meeting();
		meeting.setMeetingId(dto.getMeetingId());
		meeting.setMeeingName(dto.getMeetingName());
		meeting.setMeetingCategory(dto.getMeetingCategory());
		meeting.setMeetingContents(dto.getMeetingContents());
		meeting.setMeetingMission(dto.getMeetingMission());
		meeting.setMeetingWriter(dto.getMeetingWriter());
		
		LocalDateTime dt = LocalDateTime.now();
		meeting.setCreatedAt(dt);
		meeting.setRevisedAt(dt);
		
		meetingMapper.createMeeting(meeting);
		
		List<MeetingYoil> yoils = new ArrayList<>();
		for(String yoil: dto.getMeetingYoils()) {
			MeetingYoil myoil = new MeetingYoil();
			myoil.setMeetingId(meeting.getMeetingId());
			myoil.setMissionYoil(yoil);
			yoils.add(myoil);
		}
		
		/*
		 * for(String yoil:dto.getMeetingYoils()) { MeetingYoil meetingYoil = new
		 * MeetingYoil(); meetingYoil.setMeetingId(meeting.getMeetingId());
		 * meetingYoil.setMissionYoil(yoil);
		 * meetingMapper.createMeetingYoil(meetingYoil); }
		 */
		meetingMapper.createMeetingYoils(yoils);
		
		// 생성된 meeting id return
		Integer res =  meeting.getMeetingId();
		return res;
	}
}
