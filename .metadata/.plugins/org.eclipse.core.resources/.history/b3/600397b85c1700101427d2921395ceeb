package com.target.jwt;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.target.config.SecurityConfig;
import com.target.dto.CustomUserDetails;
import com.target.entity.User;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


public class JwtFilter extends OncePerRequestFilter{

	private static final Logger logger = LogManager.getLogger(JwtFilter.class);

	JwtUtils jwtUtils;
	
	public JwtFilter(JwtUtils jwtUtils) {
		this.jwtUtils = jwtUtils;
	}
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// jwt 를 찾아서 검증하는 기능
		String authToken = request.getHeader("Authorization"); // "Bearer sadklfj;aslkdfj;lkja;sdlkfj;lk"
		if(authToken == null || !authToken.startsWith("Bearer ")) {
			filterChain.doFilter(request, response);
			return ;
		}
		logger.debug("jwt 토큰 검증 시작");
		
		String jwt = authToken.split(" ")[1]; //sadklfj;aslkdfj;lkja;sdlkfj;lk
		if(jwtUtils.isExpiredToken(jwt)) {
			logger.debug("토큰이 만료되었음.");
			filterChain.doFilter(request, response);
			return;
		}
		
		// 정상 토큰
		logger.debug("정상 토큰으로 확인됨.");
		
		// 나중에 사용할 수도 있으니 세션에 토큰 페이로드에 넣었던 정보를 저장해 주자.
		// 단, 이때의 세션은 스테이트리스 형태이며, 이 요청이 끝나면 사라짐.
		User user = new User();
		user.setUserId(jwtUtils.getUserId(jwt));
		user.setUserRole(jwtUtils.getUserRole(jwt));
		
		// Spring Security에서 user  정보 저장하는 UserDetails 형식으로 변환
		CustomUserDetails customUserDetails = new CustomUserDetails(user);
		
		// User(principal) + password(credentials) + userRole(authorities) 로 구성된 UsernamePasswordAuthenticationToken으로 만들어서, 그 토큰을 세션에 저장 
		Authentication auth = new UsernamePasswordAuthenticationToken(customUserDetails,null, customUserDetails.getAuthorities());
		
		// auth 를 세션에 등록한다.
		SecurityContextHolder.getContext().setAuthentication(auth);
		
		// 다음 필터로 이동
		filterChain.doFilter(request, response);
	}

}
