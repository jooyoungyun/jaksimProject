package com.jaksim.service;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.jaksim.dto.Meeting;
import com.jaksim.dto.MeetingDTO;
import com.jaksim.dto.MeetingYoil;
import com.jaksim.dto.PageResponseDTO;
import com.jaksim.mapper.MeetingMapper;

@Service
public class MeetingService {
	private static final String UPLOAD_DIR = "uploads";
	
	MeetingMapper meetingMapper;
	
	public MeetingService(MeetingMapper meetingMapper) {
		this.meetingMapper = meetingMapper;
	}
	
	//이미지 저장 메소드
	private String saveImage(MultipartFile imageFile) {
		
		try {
			if( imageFile.isEmpty() ) {
				return null;
			}
			
			// 이미지 저장할 경로
			String newImageName = UUID.randomUUID().toString() + "_" + imageFile.getOriginalFilename();
			// 만일 사용자가 cover1.jpg 업로드하면
			// uploads 폴더 안에 fwefewf-gewgweg-werwer-werrew_cover1.jpg
			Path uploadPath = Paths.get(UPLOAD_DIR, newImageName);
			
			// uploads 폴더가 있는지 확인하여, 없다면 폴더 생성하기
			if(! Files.exists( Paths.get(UPLOAD_DIR) )) {
				// uploads폴더를 만들기
				Files.createDirectories( Paths.get(UPLOAD_DIR) );
			}
			
			// 파일을 저장한다. 해당 경로에 해당이미지를 bytes로 변환하여 저장
			Files.write(uploadPath, imageFile.getBytes());
			
			return uploadPath.getFileName().toString();
			
		}catch(IOException e) {
			return "실패";
		}
		
		
	}

	//이미지 삭제 메소드
	private boolean deleteImage(String imageName) {
		Path imagePath = Paths.get(UPLOAD_DIR , imageName);
		File file = imagePath.toFile();
		if(file.exists()) {
			return file.delete();			
		}
		
		return false;
		
	}
	
	// meeting 생성 메소드
	public Integer createMeeting(MeetingDTO dto) {
		// meeting 커버 이미지 저장
		String imageResult = null;
		
		if(dto.getCoverImage() != null) {
			imageResult = saveImage( dto.getCoverImage() );
			if(imageResult.equals("실패")) {
				return -1;
			}			
		}
		
		// dto를 entity(model, dto)로 변환
		Meeting meeting = new Meeting();
		meeting.setMeetingName(dto.getMeetingName());
		meeting.setMeetingWriter(dto.getMeetingWriter());
		meeting.setMeetingMission(dto.getMeetingMission());
		meeting.setMeetingCategory(dto.getMeetingCategory());
		meeting.setMeetingContents(dto.getMeetingContents());
		meeting.setMeetingCoverImage( imageResult );
		
		LocalDateTime dt = LocalDateTime.now();
		meeting.setCreatedAt(dt);
		meeting.setRevisedAt(dt);
		
		meetingMapper.createMeeting(meeting);
		
		List<MeetingYoil> yoils = new ArrayList<>();
		
		for(String yoil : dto.getMeetingYoils()) {
			MeetingYoil meetingYoil = new MeetingYoil();
			meetingYoil.setMeetingId(meeting.getMeetingId());
			meetingYoil.setMissionYoil(yoil);
			yoils.add(meetingYoil);
		}
		
		meetingMapper.createMeetingYoils(yoils);
		
//		for(String yoil : dto.getMeetingYoils()) {
//			MeetingYoil meetingYoil = new MeetingYoil();
//			meetingYoil.setMeetingId(meeting.getMeetingId());
//			meetingYoil.setMissionYoil(yoil);
//			meetingMapper.createMeetingYoil(meetingYoil);
//			
//		}
		
		// 생성된 meeting id를 return;
		
		return meeting.getMeetingId();
		
	}
	
	
	// meeting 조회 메소드
	public MeetingDTO selectMeetingById(Integer meetingId) {
		Meeting m = meetingMapper.selectMeeting(meetingId);
		
		// 만일 meetingId가 존재하지 않는 id라면 m은 null이다.
		if(m == null) {
			return null;
		}
		
//		System.out.println("=========");
//		System.out.println("미팅이름:" + m.getMeetingName());
//		System.out.println("커버사진명 : " + m.getMeetingCoverImage());
//		System.out.println("요일들.." + m.getMeetingYoils());
		// 요일이 없는 미팅은 비어있는 리스트가 요일에 들어있음
		// DB에서 가져온 형태를 fornt가 원하는 MeetingDTO형태로 바꿔 보내기
		MeetingDTO dto = new MeetingDTO();
		dto.setMeetingId(m.getMeetingId());
		dto.setMeetingName(m.getMeetingName());
		dto.setMeetingWriter(m.getMeetingWriter());
		dto.setMeetingMission(m.getMeetingMission());
		
//		[
//         {id : 6 , meetingId : 7, missionYoil : "월"} , 
//         {id : 7 , meetingId : 7, missionYoil : "수"}
//      ]
		
//		[ "월" , "수" ]
		List<String> yoils = new ArrayList<>();
		for(MeetingYoil my : m.getMeetingYoils()) {
			yoils.add(my.getMissionYoil());
		}
		dto.setMeetingYoils(yoils);
		
		dto.setMeetingCategory(m.getMeetingCategory());
		dto.setMeetingContents(m.getMeetingContents());
		
		dto.setCreatedAt(m.getCreatedAt());
		dto.setRevisedAt(m.getRevisedAt());
		
		dto.setCoverImageUrl(m.getMeetingCoverImage());
		
		
		return dto;
		
	}

	public Resource getImage(String imageName) {
		Path path = Paths.get(UPLOAD_DIR , imageName);
		try {
			Resource file = new UrlResource(path.toUri());
			
			if(file.exists() || file.isReadable() ) {
				return file;
			}
			
			return null;			
		}catch(MalformedURLException e) {
			System.out.println(e);
			return null;
		}
	}

	@Transactional
	public boolean deleteMeeting(Integer meetingId) {
		// 1. 삭제하고자 하는 Meeting이 존재하는지 확인한다.
		Meeting m = meetingMapper.selectMeeting(meetingId);
		
		if(m == null) {
			return false;
		}
		
		// 2. 삭제하고자 하는 Meeting이 로그인한 사람이 만든 미팅인지 확인한다(단, 현재 ADMIN이라면 삭제 가능)
		// 로그인 한 사람의 ID , 로그인한 사람 권한 가져오기
		String userId = SecurityContextHolder.getContext().getAuthentication().getName();
		String userRole = null;
		for( GrantedAuthority auth : SecurityContextHolder.getContext().getAuthentication().getAuthorities()) {
			userRole = auth.getAuthority();
		}
		
		if(  ! (userRole.equals("ROLE_ADMIN") || userId.equals( m.getMeetingWriter() ) )) {
			return false;
		}
		
		// 3. 이미지 경로를 가져와서 uploads 폴더에서 이미지 파일을 먼저 삭제한다.
		String imageName = m.getMeetingCoverImage();
		// uploads 폴더에서 해당 이미지 삭제
		if(! deleteImage(imageName)) {
			return false;
		}
		
		// 4. DB에서 meeting을 외래키로 참조하고 있는 테이블(meeting_yoil)에서 먼저 삭제를 다 한 후에
		//   meeting을 삭제한다.
		meetingMapper.deleteMeetingYoil(meetingId);
		meetingMapper.deleteMeeting(meetingId);
		
		return true;
		
	}

	@Transactional
	public boolean updateMeeting(Integer meetingId, MeetingDTO dto) {
		// meetingId가 존재하는지 확인
		Meeting m = meetingMapper.selectMeeting(meetingId);
		if(m == null) {
			return false;
		}		
		
		// 로그인 한 사람이 meeting 작성자 인지 혹은 ADMIN인지 확인
		String userId = SecurityContextHolder.getContext().getAuthentication().getName();
		String userRole = null;
		for( GrantedAuthority auth : SecurityContextHolder.getContext().getAuthentication().getAuthorities()) {
			userRole = auth.getAuthority();
		}
		
		if(  ! (userRole.equals("ROLE_ADMIN") || userId.equals( m.getMeetingWriter() ) )) {
			return false;
		}
		
		// 수정하려는 이미지가 저장된 이미지랑 다른이미지라면 uploads 폴더에서 기존 이미지를 삭제하고,
		// 새로운 이미지를 upload
		String imageResult = null;
		if(dto.getCoverImage() != null) {
			// 기존 이미지를 uploads 폴더에서 삭제 
			
			if( ! deleteImage(dto.getCoverImageUrl()) ) {
				return false;
			}
			imageResult = saveImage( dto.getCoverImage() );
			if(imageResult.equals("실패")) {
				return false;
			}			
		}
		// meeting 테이블 업데이트
		m.setMeetingName(dto.getMeetingName());
		m.setMeetingWriter(dto.getMeetingWriter());
		m.setMeetingMission(dto.getMeetingMission());
		m.setMeetingCategory(dto.getMeetingCategory());
		m.setMeetingContents(dto.getMeetingContents());
		if(dto.getCoverImage() != null) {
			m.setMeetingCoverImage(imageResult);			
		}
		
		m.setRevisedAt(LocalDateTime.now());
		
		
		
		List<MeetingYoil> yoils = new ArrayList<>();
		
		for( String yoil : dto.getMeetingYoils()) {
			MeetingYoil my = new MeetingYoil();
			my.setMeetingId(meetingId);
			my.setMissionYoil(yoil);
			yoils.add(my);
		}
		
		// meeting yoil 테이블 업데이트 --> 전체삭제 전체 생성
		meetingMapper.deleteMeetingYoil(meetingId);
		meetingMapper.createMeetingYoils(yoils);
		
		return true;
		
	}

	public PageResponseDTO<MeetingDTO> getMeetingListByPaginatiion(Integer page, Integer size, String keyword,
			String category) {
		if(page == null || size == null || keyword == null || category == null) {
			return null;
		}
		
		//offset , limit , keyword, category
		// 1페이지 당 5개씩 본다 --> limit 5 
		// 1페이지를 볼래 --> 1번행부터 --> offset 0부터
		// 2페이지 --> 6번행 부터 --> offset 5부터
		// 3페이지 --> 11번행부터 --> offset 10
		int offset = size * (page-1);
		int limit = size;
		
		keyword = keyword.trim(); 
		List<Meeting> meetingListFromDB = meetingMapper.selectMeetingByPagination( offset, limit , keyword , category);
		
		List<MeetingDTO> meetingListForFront = new ArrayList<>();
		
		for (Meeting meeting : meetingListFromDB) {
			
			MeetingDTO dto = new MeetingDTO();
			dto.setMeetingId(meeting.getMeetingId());
			dto.setMeetingName(meeting.getMeetingName());
			dto.setMeetingWriter(meeting.getMeetingWriter());
			dto.setMeetingMission(meeting.getMeetingMission());
			List<String> yoils = new ArrayList<>();
			for(MeetingYoil my : meeting.getMeetingYoils()) {
				yoils.add(my.getMissionYoil());
			}
			
			dto.setMeetingYoils(yoils);
			
			dto.setMeetingCategory(meeting.getMeetingCategory());
			dto.setMeetingContents(meeting.getMeetingContents());
			dto.setCreatedAt(meeting.getCreatedAt());
			dto.setRevisedAt(meeting.getRevisedAt());
			dto.setCoverImageUrl(meeting.getMeetingCoverImage());
			
			meetingListForFront.add(dto);
			
		}
		
		// 전체요소갯수
		int totalElements = meetingMapper.countMeetings(keyword, category);
		// 현재페이지
		int currentPage = page;
		// 마지막페이지
		// size , totalElements갯수 를가지고 마지막 페이지 번호 계산하기
		int lastPage = totalElements / size + (totalElements % size == 0 ? 0 : 1);
		// 다음페이지 존재여부
		boolean hasNextPage = currentPage < lastPage;
		
		PageResponseDTO<MeetingDTO> res = new PageResponseDTO<>();
		res.setContents(meetingListForFront);
		res.setCurrentPage(currentPage);
		res.setLastPage(lastPage);
		res.setTotalElements(totalElements);
		res.setHasNextPage(hasNextPage);		
		
		return res;
	}

	public void createLike(Integer meetingId) {
		// TODO Auto-generated method stub
		// 로그인한 사용자 아이디 꺼내오기
		String userId = SecurityContextHolder.getContext().getAuthentication().getName();
		meetingMapper.createLike(userId, meetingId);
	}

	public void deleteLike(Integer meetingId) {
		// TODO Auto-generated method stub
		String userId = SecurityContextHolder.getContext().getAuthentication().getName();
		meetingMapper.deleteLike(userId, meetingId);
		
	}
	
	
	
}
























